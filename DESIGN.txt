Reset Condition:
	1) reset after hitting the ground and x seconds have passed.
	2) movement (velocity) is below some threshold.
	3) when player is touched, this way you can't accidently trap him.

Blocks:
	Add number to blocks placed in the world to indicate undo ordering
	Bounce and Wood so far have same logic but other blocks may not.  Additionally need a "contacted" method for sound, animation, etc.
	Accel adds too much of a randomness factor, maybe limit max velocity.

Hud:
	Number in corner of each block button to indicate number of blocks left

Buttons:
	Enlarge slightly when action down, decrease to normal on action up.
		- provides some sort of feedback for when buttons are pressed

Position markers:
	Allow players to place flags to remember positions.  

Obstacles
	Destructables?

Mechanics
	Some sort of scoring mechanism?  Airtime?  Num blocks used? 
D:\programs\eclipse_java_cs125_32\eclipse\plugins\org.eclipse.equinox.launcher_1.3.0.v20120522-1813.jar

	Consider remaking everything in Okami-esque style.  Would look quite nice for this kind of game.  Style kind of hard to emulate though.

Animations
	Ease functions for movement. Most text?

Level Clear
	Grey (dark) out the screen while transitioning? "clear" before level end menu appears?  Detach other hud elements?

-----------NOTES----------

AniManager is for animation effects, ie. entity modifiers.
EffectsManager is for creating and managing effects such as dust, particle, etc.

Remember to add padding for textures otherwise they might not load correctly

Levels_
	To prototype levels (object and acorn placement, level size) make everything movable in debug mode and have the objects position be debug text.  This way I can note them down and hardcode (or use some json/xml loader) later.

Use texturepacker to optimize textures 
	** FIXES BILINEAR EXTRUDE WHEN STITCHING SPRITES NEXT TO EACH OTHER (parallax/bg)
	** LOADFROMASSETS TAKES A FULL PATH AND ALSO A BASE PATH, DO NOT USE ONLY ASSET PATH

ParallaxObjects
	Rate should be a max of 0.6 due to camera movement issues.  Although logic is correct, when the camera stops moving it will look like the sprites "snap" into place, this is not a bug but a visual issue.  Consider looking into smoothing the movement in future.  